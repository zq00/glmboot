apply(sapply(0:(2^nnbd - 1), function(x) as.integer(intToBits(x)) )[1:nnbd,], 2, function(t) paste0(t, collapse = ""))
log(0.5)
knitr::opts_chunk$set(echo = TRUE)
library(graph)
library(gRbase)
library(igraph)
library(SNPknock)
library(tidyverse)
library(HMM)
library(glmnet)
source('~/Documents/Work/Paisa/Code/sandbox/knockoff/knockoff.R', echo=F)
source('~/Documents/Work/Paisa/Code/sandbox/knockoff/knockoff_functions.R', echo=TRUE)
p <- 8
n <- 4000
source("~/Documents/Work/Paisa/Code/sandbox/approximateSample/HMMSetup.R", echo=TRUE)
H1 <- sampleHMM(pInit, Q, pEmit, n = n)
H2 <- sampleHMM(pInit, Q, pEmit, n = n)
X <- H1 + H2
ComputeLogDensity <- function(X, y, d){
XX <- c("AA", "AB", "BB")[X + 1]
logForwardProbabilities <- forward(hmmdef, XX)
# Marginal probability of the observed sequence
logProbObs <- log(sum(exp(logForwardProbabilities[,p])))
logProbS <- pSelect(X, y, d, option = "gaussian") # compute this function
return(logProbObs + logProbS)
}
prop_nonnull_case <- 0.1
gamma0 <- 1 # the influnece of Y on case-control status
gamma <- numeric(p)
nnonnull_case <- prop_nonnull_case * p
nonnull_case <- sample((1:p), nnonnull_case, replace = F)
gamma[nonnull_case] <- rnorm(nnonnull_case, 0, 0.5)
prop_nonnull <- 0.1 # proportion of nonnulls
beta <- numeric(p) # model coef
nnonnull <- prop_nonnull * p
nonnull <- sample(1:p, nnonnull, replace = F)
beta[nonnull] <- rnorm(nnonnull, 0, 0.5)
nonnull_cases
nonnull_case
prop_nonnull_case <- 0.3
gamma0 <- 1 # the influnece of Y on case-control status
gamma <- numeric(p)
nnonnull_case <- prop_nonnull_case * p
nonnull_case <- sample((1:p), nnonnull_case, replace = F)
gamma[nonnull_case] <- rnorm(nnonnull_case, 0, 0.5)
prop_nonnull <- 0.1 # proportion of nonnulls
beta <- numeric(p) # model coef
nnonnull <- prop_nonnull * p
nonnull <- sample(1:p, nnonnull, replace = F)
beta[nonnull] <- rnorm(nnonnull, 0, 0.5)
nonnull_case
prop_nonnull_case <- 0.4
gamma0 <- 1 # the influnece of Y on case-control status
gamma <- numeric(p)
nnonnull_case <- prop_nonnull_case * p
nonnull_case <- sample((1:p), nnonnull_case, replace = F)
gamma[nonnull_case] <- rnorm(nnonnull_case, 0, 0.5)
prop_nonnull <- 0.1 # proportion of nonnulls
beta <- numeric(p) # model coef
nnonnull <- prop_nonnull * p
nonnull <- sample(1:p, nnonnull, replace = F)
beta[nonnull] <- rnorm(nnonnull, 0, 0.5)
nnonnull_case
prop_nonnull_case <- 0.4
gamma0 <- 1 # the influnece of Y on case-control status
gamma <- numeric(p)
nnonnull_case <- prop_nonnull_case * p
nonnull_case <- sample((1:p), nnonnull_case, replace = F)
gamma[nonnull_case] <- rnorm(nnonnull_case, 0, 0.5)
prop_nonnull <- 0.1 # proportion of nonnulls
beta <- numeric(p) # model coef
nnonnull <- prop_nonnull * p
nonnull <- sample(1:p, nnonnull, replace = F)
beta[nonnull] <- rnorm(nnonnull, 0, 0.5)
nnonnull_case
nonnull_case
V <- 1:p
edL <- vector("list", length=p)
names(edL) <- as.character(V)
for(i in 1:p){
if(i == 1){
edges <- c(2)
}else if(i == p){
edges <- c(p-1)
}else{
edges <- c(i-1, i+1)
}
if(i %in% nonnull_case){
edges <- c(edges, nonnull_case[which(nonnull_case!=i)])
}
edges <- as.character(edges)
edL[[as.character(i)]] <- list(edges = edges)
}
gR <- graphNEL(nodes=as.character(V), edgeL=edL)
p
triangulated_gR <- triangulate(gR)
edges_triangulated <- graph::edges(triangulated_gR)
edge_matrix <- NULL
for(i in 1:p){
new_edges <- cbind(i, edges_triangulated[[i]])
edge_matrix <- rbind(edge_matrix, new_edges)
}
triangulated_graph <- graph_from_edgelist(edge_matrix, directed = F)
cliques_triangulated <- max_cliques(triangulated_graph)
ncliques <- length(cliques_triangulated)
edge_weight <- NULL
for(i in 1:p){
clique_containing_i <- NULL
cat(i, ":")
for(j in 1:ncliques){
if(j %% 100 == 0) cat(j, ",")
if(as.character(i) %in% names(cliques_triangulated[[j]])){
clique_containing_i <- c(clique_containing_i, j)
}
}
# add edges between cliques if they have not showed up yet
new_edge_weight <- NULL
for(k in 1:length(clique_containing_i)){
for(l in 1:length(clique_containing_i)){
if(k != l){
# Compute the weights
ind1 <- names(cliques_triangulated[[clique_containing_i[k]]])
ind2 <- names(cliques_triangulated[[clique_containing_i[l]]])
new_weight <- length(intersect(ind1, ind2))
new_edge <- sort(c(clique_containing_i[l], clique_containing_i[k]))
# order the two nodes in incresing order
new_edge_weight <- rbind(new_edge_weight, c(new_edge, new_weight))
}
}
}
new_edge_weight <- base::unique(new_edge_weight)
edge_weight <- rbind(edge_weight, new_edge_weight)
cat("\n")
}
clique_graph <- graph_from_edgelist(edge_weight[,1:2], directed = F)
junction_tree <- mst(clique_graph, weights = 1/edge_weight[,3]) # the junction tree
# extract edges
edges_junction_tree <- as_edgelist(junction_tree)
junction_tree
cliques_triangulated
junction_tree
# list of ordered vertices
ordered_vertices <- NULL
neighbors <- list() # the neighbors of the i-th vertex is not the one in the ordered list, e.g. if the first one in order is 89, then find its neighbor by calling neighbors[[89]]
tree_edges <- edges_junction_tree # initial active tree
i <- 0
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
while(i < p){
which_edge <- which(rowSums(tree_edges == V) == 1)
if(sum(which_edge) == 0){
# if no V', add all of the vertices in V to the list
new_vertices <- names(cliques_triangulated[[V]])
}else{
VPrime <- setdiff(tree_edges[which_edge,], V)
# what are the vertices in V but not in VPrime?
new_vertices <- setdiff(names(cliques_triangulated[[V]]), names(cliques_triangulated[[VPrime]]))
}
if(length(new_vertices) == 0){
# remove V from the list and continue
stop("There's no vertex in V but not in VPrime!")
}else{
# add the new vertex to the list
for(j in 1:length(new_vertices)){
i <- i + 1
ordered_vertices[i] <- as.numeric(new_vertices[j])
new_nbd <- list(vertex = as.numeric(new_vertices[j]), nbd = as.numeric(setdiff(names(cliques_triangulated[[V]]), new_vertices[1:j])))
neighbors[[as.numeric(new_vertices[j])]]  <- new_nbd
}
# remove V from the edge list
if(sum(which_edge) >  0){
tree_edges <- tree_edges[-which_edge, , drop = F]
}
}
if(sum(tree_edges == VPrime) == 1 | nrow(tree_edges) == 0){
V = VPrime
}else{
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
}
}
ordered_vertices
neighbors
edges_junction_tree
ordered_vertices
clique_graph
cliques_triangulated
# list of ordered vertices
ordered_vertices <- NULL
neighbors <- list() # the neighbors of the i-th vertex is not the one in the ordered list, e.g. if the first one in order is 89, then find its neighbor by calling neighbors[[89]]
tree_edges <- edges_junction_tree # initial active tree
i <- 0
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
which_edge <- which(rowSums(tree_edges == V) == 1)
if(sum(which_edge) == 0){
# if no V', add all of the vertices in V to the list
new_vertices <- names(cliques_triangulated[[V]])
}else{
VPrime <- setdiff(tree_edges[which_edge,], V)
# what are the vertices in V but not in VPrime?
new_vertices <- setdiff(names(cliques_triangulated[[V]]), names(cliques_triangulated[[VPrime]]))
}
if(length(new_vertices) == 0){
# remove V from the list and continue
stop("There's no vertex in V but not in VPrime!")
}else{
# add the new vertex to the list
for(j in 1:length(new_vertices)){
i <- i + 1
ordered_vertices[i] <- as.numeric(new_vertices[j])
new_nbd <- list(vertex = as.numeric(new_vertices[j]), nbd = as.numeric(setdiff(names(cliques_triangulated[[V]]), new_vertices[1:j])))
neighbors[[as.numeric(new_vertices[j])]]  <- new_nbd
}
# remove V from the edge list
if(sum(which_edge) >  0){
tree_edges <- tree_edges[-which_edge, , drop = F]
}
}
if(sum(tree_edges == VPrime) == 1 | nrow(tree_edges) == 0){
V = VPrime
}else{
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
}
V
new_vertices
VPrime
i
i
i
which_edge <- which(rowSums(tree_edges == V) == 1)
if(sum(which_edge) == 0){
# if no V', add all of the vertices in V to the list
new_vertices <- names(cliques_triangulated[[V]])
}else{
VPrime <- setdiff(tree_edges[which_edge,], V)
# what are the vertices in V but not in VPrime?
new_vertices <- setdiff(names(cliques_triangulated[[V]]), names(cliques_triangulated[[VPrime]]))
}
if(length(new_vertices) == 0){
# remove V from the list and continue
stop("There's no vertex in V but not in VPrime!")
}else{
# add the new vertex to the list
for(j in 1:length(new_vertices)){
i <- i + 1
ordered_vertices[i] <- as.numeric(new_vertices[j])
new_nbd <- list(vertex = as.numeric(new_vertices[j]), nbd = as.numeric(setdiff(names(cliques_triangulated[[V]]), new_vertices[1:j])))
neighbors[[as.numeric(new_vertices[j])]]  <- new_nbd
}
# remove V from the edge list
if(sum(which_edge) >  0){
tree_edges <- tree_edges[-which_edge, , drop = F]
}
}
if(sum(tree_edges == VPrime) == 1 | nrow(tree_edges) == 0){
V = VPrime
}else{
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
}
i
V
VPrime
i=0
ordered_vertices <- NULL
neighbors <- list() # the neighbors of the i-th vertex is not the one in the ordered list, e.g. if the first one in order is 89, then find its neighbor by calling neighbors[[89]]
tree_edges <- edges_junction_tree # initial active tree
i <- 0
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
V
which_edge <- which(rowSums(tree_edges == V) == 1)
if(sum(which_edge) == 0){
# if no V', add all of the vertices in V to the list
new_vertices <- names(cliques_triangulated[[V]])
}else{
VPrime <- setdiff(tree_edges[which_edge,], V)
# what are the vertices in V but not in VPrime?
new_vertices <- setdiff(names(cliques_triangulated[[V]]), names(cliques_triangulated[[VPrime]]))
}
if(length(new_vertices) == 0){
# remove V from the list and continue
stop("There's no vertex in V but not in VPrime!")
}else{
# add the new vertex to the list
for(j in 1:length(new_vertices)){
i <- i + 1
ordered_vertices[i] <- as.numeric(new_vertices[j])
new_nbd <- list(vertex = as.numeric(new_vertices[j]), nbd = as.numeric(setdiff(names(cliques_triangulated[[V]]), new_vertices[1:j])))
neighbors[[as.numeric(new_vertices[j])]]  <- new_nbd
}
# remove V from the edge list
if(sum(which_edge) >  0){
tree_edges <- tree_edges[-which_edge, , drop = F]
}
}
if(sum(tree_edges == VPrime) == 1 | nrow(tree_edges) == 0){
V = VPrime
}else{
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
}
V
ordered_vertices <- NULL
neighbors <- list() # the neighbors of the i-th vertex is not the one in the ordered list, e.g. if the first one in order is 89, then find its neighbor by calling neighbors[[89]]
tree_edges <- edges_junction_tree # initial active tree
i <- 0
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
V
i
which_edge <- which(rowSums(tree_edges == V) == 1)
if(sum(which_edge) == 0){
# if no V', add all of the vertices in V to the list
new_vertices <- names(cliques_triangulated[[V]])
}else{
VPrime <- setdiff(tree_edges[which_edge,], V)
# what are the vertices in V but not in VPrime?
new_vertices <- setdiff(names(cliques_triangulated[[V]]), names(cliques_triangulated[[VPrime]]))
}
if(length(new_vertices) == 0){
# remove V from the list and continue
stop("There's no vertex in V but not in VPrime!")
}else{
# add the new vertex to the list
for(j in 1:length(new_vertices)){
i <- i + 1
ordered_vertices[i] <- as.numeric(new_vertices[j])
new_nbd <- list(vertex = as.numeric(new_vertices[j]), nbd = as.numeric(setdiff(names(cliques_triangulated[[V]]), new_vertices[1:j])))
neighbors[[as.numeric(new_vertices[j])]]  <- new_nbd
}
# remove V from the edge list
if(sum(which_edge) >  0){
tree_edges <- tree_edges[-which_edge, , drop = F]
}
}
if(sum(tree_edges == VPrime) == 1 | nrow(tree_edges) == 0){
V = VPrime
}else{
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
}
V
which_edge <- which(rowSums(tree_edges == V) == 1)
if(sum(which_edge) == 0){
# if no V', add all of the vertices in V to the list
new_vertices <- names(cliques_triangulated[[V]])
}else{
VPrime <- setdiff(tree_edges[which_edge,], V)
# what are the vertices in V but not in VPrime?
new_vertices <- setdiff(names(cliques_triangulated[[V]]), names(cliques_triangulated[[VPrime]]))
}
if(length(new_vertices) == 0){
# remove V from the list and continue
stop("There's no vertex in V but not in VPrime!")
}else{
# add the new vertex to the list
for(j in 1:length(new_vertices)){
i <- i + 1
ordered_vertices[i] <- as.numeric(new_vertices[j])
new_nbd <- list(vertex = as.numeric(new_vertices[j]), nbd = as.numeric(setdiff(names(cliques_triangulated[[V]]), new_vertices[1:j])))
neighbors[[as.numeric(new_vertices[j])]]  <- new_nbd
}
# remove V from the edge list
if(sum(which_edge) >  0){
tree_edges <- tree_edges[-which_edge, , drop = F]
}
}
if(sum(tree_edges == VPrime) == 1 | nrow(tree_edges) == 0){
V = VPrime
}else{
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
}
V
which_edge <- which(rowSums(tree_edges == V) == 1)
if(sum(which_edge) == 0){
# if no V', add all of the vertices in V to the list
new_vertices <- names(cliques_triangulated[[V]])
}else{
VPrime <- setdiff(tree_edges[which_edge,], V)
# what are the vertices in V but not in VPrime?
new_vertices <- setdiff(names(cliques_triangulated[[V]]), names(cliques_triangulated[[VPrime]]))
}
if(length(new_vertices) == 0){
# remove V from the list and continue
stop("There's no vertex in V but not in VPrime!")
}else{
# add the new vertex to the list
for(j in 1:length(new_vertices)){
i <- i + 1
ordered_vertices[i] <- as.numeric(new_vertices[j])
new_nbd <- list(vertex = as.numeric(new_vertices[j]), nbd = as.numeric(setdiff(names(cliques_triangulated[[V]]), new_vertices[1:j])))
neighbors[[as.numeric(new_vertices[j])]]  <- new_nbd
}
# remove V from the edge list
if(sum(which_edge) >  0){
tree_edges <- tree_edges[-which_edge, , drop = F]
}
}
if(sum(tree_edges == VPrime) == 1 | nrow(tree_edges) == 0){
V = VPrime
}else{
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
}
V
which_edge <- which(rowSums(tree_edges == V) == 1)
which_edge
tree_edges
VPrime <- setdiff(tree_edges[which_edge,], V)
VPrime
new_vertices <- setdiff(names(cliques_triangulated[[V]]), names(cliques_triangulated[[VPrime]]))
new_vertices
# add the new vertex to the list
for(j in 1:length(new_vertices)){
i <- i + 1
ordered_vertices[i] <- as.numeric(new_vertices[j])
new_nbd <- list(vertex = as.numeric(new_vertices[j]), nbd = as.numeric(setdiff(names(cliques_triangulated[[V]]), new_vertices[1:j])))
neighbors[[as.numeric(new_vertices[j])]]  <- new_nbd
}
# remove V from the edge list
if(sum(which_edge) >  0){
tree_edges <- tree_edges[-which_edge, , drop = F]
}
# add the new vertex to the list
for(j in 1:length(new_vertices)){
i <- i + 1
ordered_vertices[i] <- as.numeric(new_vertices[j])
new_nbd <- list(vertex = as.numeric(new_vertices[j]), nbd = as.numeric(setdiff(names(cliques_triangulated[[V]]), new_vertices[1:j])))
neighbors[[as.numeric(new_vertices[j])]]  <- new_nbd
}
# remove V from the edge list
if(sum(which_edge) >  0){
tree_edges <- tree_edges[-which_edge, , drop = F]
} # add the new vertex to the list
for(j in 1:length(new_vertices)){
i <- i + 1
ordered_vertices[i] <- as.numeric(new_vertices[j])
new_nbd <- list(vertex = as.numeric(new_vertices[j]), nbd = as.numeric(setdiff(names(cliques_triangulated[[V]]), new_vertices[1:j])))
neighbors[[as.numeric(new_vertices[j])]]  <- new_nbd
}
# remove V from the edge list
if(sum(which_edge) >  0){
tree_edges <- tree_edges[-which_edge, , drop = F]
# list of ordered vertices
ordered_vertices <- NULL
neighbors <- list() # the neighbors of the i-th vertex is not the one in the ordered list, e.g. if the first one in order is 89, then find its neighbor by calling neighbors[[89]]
tree_edges <- edges_junction_tree # initial active tree
i <- 0
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
while(i < p){
which_edge <- which(rowSums(tree_edges == V) == 1)
if(sum(which_edge) == 0){
# if no V', add all of the vertices in V to the list
new_vertices <- names(cliques_triangulated[[V]])
}else{
VPrime <- setdiff(tree_edges[which_edge,], V)
# what are the vertices in V but not in VPrime?
new_vertices <- setdiff(names(cliques_triangulated[[V]]), names(cliques_triangulated[[VPrime]]))
}
if(length(new_vertices) == 0){
# remove V from the list and continue
stop("There's no vertex in V but not in VPrime!")
}else{
# add the new vertex to the list
for(j in 1:length(new_vertices)){
i <- i + 1
ordered_vertices[i] <- as.numeric(new_vertices[j])
new_nbd <- list(vertex = as.numeric(new_vertices[j]), nbd = as.numeric(setdiff(names(cliques_triangulated[[V]]), new_vertices[1:j])))
neighbors[[as.numeric(new_vertices[j])]]  <- new_nbd
}
# remove V from the edge list
if(sum(which_edge) >  0){
tree_edges <- tree_edges[-which_edge, , drop = F]
}
}
if(sum(tree_edges == VPrime) == 1 | nrow(tree_edges) == 0){
V = VPrime
}else{
V <- as.numeric(names(which(table(as.vector(tree_edges)) == 1)[1]))
}
}
ssize <- 200
ktot <- 40
fdp <- numeric(ktot)
for(k in 1:ktot){
newind <- ((k-1) * ssize + 1) : (k * ssize)
# create a new dataset
Xsmall <- rbind(XXPos[newind, ], XXNeg[newind, ])
XTildeSmall <- rbind(XXTildePos[newind, ], XXTildeNeg[newind, ])
Ysmall <- c(YYPos[newind], YYNeg[newind])
# compute the power and fdp
newfdp <- compute_power_fdp(Xsmall, XTildeSmall, Ysmall)
fdp[k] <- newfdp$fdp
cat(newfdp$fdp,",", newfdp$power, "\n")
}
sample_y <- function(X, beta){
mu <- 1 / (1 + exp(- X %*% beta))
Y <- rbinom(n, 1, mu)
Y
}
setwd("~/Desktop/Topics/glm_boot/paper/code/Arxiv/Method")
rep(s*gamma_hat, 5)
rep(c(1,2,3), 5)
as.vector(matrix(c(1,2,3,4,5,6), nrow = 2, byrow = T))
matrix(c(1,2,3,4,5,6), nrow = 2, byrow = T)
nu <- 5
rho <- 0.5
x <- rho^(c(0:(p/2), (p/2-1):1))
p = 100
nu <- 5
rho <- 0.5
x <- rho^(c(0:(p/2), (p/2-1):1))
cov_mat <- toeplitz(x)
diag(solve(cov_mat))
0.01 / 1/3
0.01/1.33*100
0.5 / 80*100
0.6 / 80 * 100
1.4/80*100
